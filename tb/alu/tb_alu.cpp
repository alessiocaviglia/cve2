// Include the header file generated by Verilator
#include "Vvcve2_alu.h"
#include "verilated.h"
#include "verilated_vcd_c.h" // Include the VCD tracing header

int main(int argc, char **argv, char **env) {
    // Initialize Verilators variables
    Verilated::commandArgs(argc, argv);

    // Create an instance of our module under test
    Vvcve2_alu *alu = new Vvcve2_alu;

    // Initialize VCD tracing
    Verilated::traceEverOn(true);
    VerilatedVcdC* tfp = new VerilatedVcdC;
    alu->trace(tfp, 99); // Trace 99 levels of hierarchy
    tfp->open("waveform.vcd"); // Open the VCD file

    // Generate some test vectors
    alu->operator_i = 0;
    alu->operand_a_i = 10;
    alu->operand_b_i = 20;
    alu->instr_first_cycle_i = 1;
    alu->multdiv_operand_a_i = 30;
    alu->multdiv_operand_b_i = 40;
    alu->multdiv_sel_i = 0;
    alu->imd_val_q_i[0] = 50;
    alu->imd_val_q_i[1] = 60;

    // Evaluate the model
    alu->eval();

    // Start VCD tracing
    tfp->dump(0);

    // Check the results
    if (alu->adder_result_o != 30) {
        printf("Test failed! adder_result_o = %d, expected 30\n", alu->adder_result_o);
        return 1;
    }

    // Stop VCD tracing
    tfp->close();

    // Destroy model
    alu->final();
    delete alu;

    // Finish
    printf("Test passed!\n");
    return 0;
}